// Generated by LiveScript 1.3.1
var fs, tar, createGunzip, EventEmitter, ref$, next, isFile, addExtension, isExecutable, executableMsg, list, apply;
fs = require('fs');
tar = require('tar');
createGunzip = require('zlib').createGunzip;
EventEmitter = require('events').EventEmitter;
ref$ = require('./utils'), next = ref$.next, isFile = ref$.isFile, addExtension = ref$.addExtension, isExecutable = ref$.isExecutable, executableMsg = ref$.executableMsg;
module.exports = list = function(options){
  var ref$, path, gzip, emitter, ended, error, files, onError, onEnd, onEntry, onListener, parse;
  ref$ = apply(
  options), path = ref$.path, gzip = ref$.gzip;
  emitter = new EventEmitter;
  ended = false;
  error = false;
  files = [];
  onError = function(err){
    error = err;
    return emitter.emit('error', err);
  };
  onEnd = function(){
    ended = true;
    return emitter.emit('end', files);
  };
  onEntry = function(entry){
    files.push(
    entry);
    return emitter.emit('entry', entry);
  };
  onListener = function(name, fn){
    switch (name) {
    case 'error':
      if (error) {
        return fn(
        error);
      }
      break;
    case 'end':
      if (ended) {
        return fn(
        files);
      }
    }
  };
  parse = function(){
    return next(function(){
      var nar, entries, entryReader, emitEntries, parse, stream;
      nar = null;
      entries = {};
      if (!isFile(
      path)) {
        return onError(
        new Error('The given path is not a file'));
      }
      if (isExecutable(
      path)) {
        return onError(
        executableMsg(
        path));
      }
      entryReader = function(entry){
        var data;
        data = '';
        if (/\.nar\.json$/.test(entry.path)) {
          entry.on('data', function(it){
            return data += it.toString();
          });
          return entry.on('end', function(){
            return nar = JSON.parse(
            data);
          });
        } else {
          return entries[entry.path] = entry, entries;
        }
      };
      emitEntries = function(){
        emitter.emit('info', nar);
        return nar.files.forEach(function(file){
          return onEntry(
          {
            archive: file.archive,
            type: file.type,
            dest: file.dest,
            size: entries[file.archive].size,
            props: entries[file.archive].props
          });
        });
      };
      parse = tar.Parse();
      parse.on('error', onError);
      parse.on('entry', entryReader);
      parse.on('end', function(){
        if (!nar) {
          return onError(
          new Error('Invalid nar file'));
        }
        emitEntries();
        return onEnd();
      });
      stream = fs.createReadStream(
      path);
      stream.on('error', onError);
      if (gzip) {
        stream = stream.pipe(createGunzip());
      }
      return stream.pipe(parse);
    });
  };
  emitter.on('newListener', onListener);
  parse();
  return emitter;
};
apply = function(options){
  return {
    gzip: true,
    path: addExtension(
    options.path)
  };
};
