// Generated by LiveScript 1.3.1
var fs, request, utils, parse, ref$, join, dirname, EventEmitter, version, progress, next, env, isWin, isArray, once, platform, arch, mk, rm, exists, clone, extend, discoverPkg, httpStatus, headers, download, apply, getFilename, getProxy, discoverAuth;
fs = require('fs');
request = require('request');
utils = require('./utils');
parse = require('url').parse;
ref$ = require('path'), join = ref$.join, dirname = ref$.dirname;
EventEmitter = require('events').EventEmitter;
version = require('../package.json').version;
progress = require('request-progress');
next = utils.next, env = utils.env, isWin = utils.isWin, isArray = utils.isArray, once = utils.once, platform = utils.platform, arch = utils.arch, mk = utils.mk, rm = utils.rm, exists = utils.exists, clone = utils.clone, extend = utils.extend, discoverPkg = utils.discoverPkg, httpStatus = utils.httpStatus;
headers = {
  'User-Agent': "node nar " + version + " (" + platform + "-" + arch + ")"
};
module.exports = download = function(options){
  var ref$, url, dest, filename, auth, emitter, output, errored, createDest, clean, onError, onDownload, onEnd, onProgress, handler, doDownload, e;
  ref$ = options = apply(
  options), url = ref$.url, dest = ref$.dest, filename = ref$.filename, auth = ref$.auth;
  emitter = new EventEmitter;
  output = join(dest, filename);
  errored = false;
  createDest = function(){
    if (!exists(
    dest)) {
      return mk(dest);
    }
  };
  clean = function(){
    try {
      return rm(output);
    } catch (e$) {}
  };
  onError = once(function(err, code){
    errored = true;
    clean();
    if (err) {
      return emitter.emit('error', err, code);
    }
  });
  onDownload = function(){
    return emitter.emit(
    'download');
  };
  onEnd = once(function(){
    if (!errored) {
      return emitter.emit('end', output);
    }
  });
  onProgress = function(it){
    return emitter.emit('progress', it);
  };
  handler = function(err, res, data){
    if (err) {
      return onError(
      err);
    } else if (res.statusCode >= 400) {
      return onError(new Error("Invalid response code: " + httpStatus(res.statusCode)), res.statusCode);
    } else if (!data) {
      return onError(
      new Error('Empty response'));
    }
  };
  doDownload = function(){
    return next(function(){
      var stream, http;
      onDownload();
      createDest();
      stream = fs.createWriteStream(
      output);
      stream.on('error', onError);
      http = request(options, handler);
      http.on('error', onError);
      return progress(http).on('progress', onProgress).pipe(stream).on('close', onEnd);
    });
  };
  try {
    doDownload();
  } catch (e$) {
    e = e$;
    onError(
    e);
  }
  return emitter;
};
apply = function(options){
  return {
    url: options.url,
    auth: discoverAuth(
    options.auth),
    filename: options.filename || getFilename(
    options.url),
    dest: options.dest || process.cwd(),
    timeout: options.timeout || 10000,
    strictSSL: options.strictSSL || false,
    proxy: options.proxy || getProxy(),
    headers: extend(clone(
    headers), options.headers)
  };
};
getFilename = function(url){
  var file;
  if (url) {
    file = parse(url).pathname.split('/').slice(-1).pop();
    if (!file) {
      file = 'archive.nar';
    }
  } else {
    file = 'archive.nar';
  }
  return file;
};
getProxy = function(){
  return env(
  'http_proxy');
};
discoverAuth = function(auth){
  var user, password;
  if (auth) {
    user = auth.user, password = auth.password;
  }
  if (!user) {
    user = env(
    'HTTP_USER');
  }
  if (!password) {
    password = env(
    'HTTP_PASSWORD');
  }
  if (user && password) {
    return {
      user: user,
      password: password
    };
  }
};
