// Generated by LiveScript 1.3.1
var nar, common, program, echo, createBar, onEntry, onArchive, onDownload, onError, onProgress, updateBar, onDownloadEnd, archiveName, run, formatEol;
nar = require('../nar');
common = require('./common');
program = require('commander');
echo = common.echo, createBar = common.createBar, onEntry = common.onEntry, onArchive = common.onArchive, onDownload = common.onDownload, onError = common.onError, onProgress = common.onProgress, updateBar = common.updateBar, onDownloadEnd = common.onDownloadEnd, archiveName = common.archiveName;
program.command('run <archive>').description('\n  Run archive files').usage('<archive> [options]').option('-o, --output <path>', 'Output directory').option('-d, --debug', 'Enable debud mode. More information will be shown').option('-v, --verbose', 'Enable verbose  mode. Will output stdout and stderr').option('-as, --args-start <args>', 'Aditional arguments to pass to start command').option('-ap, --args-prestart <args>', 'Aditional arguments to pass to prestart command').option('-as, --args-stop <args>', 'Aditional arguments to pass to stop command').option('-ax, --args-poststop <args>', 'Aditional arguments to pass to poststop command').option('-u, --user <user>', 'HTTP autenticantion user').option('-p, --password <password>', 'HTTP user password').option('--proxy <url>', 'Proxy server URL to use').option('--timeout <number>', 'HTTP request timeout').option('--strict-ssl', 'Enable strict SSL').option('--no-clean', 'Disable app directory clean after exit').option('--no-hooks', 'Disable command hooks').on('--help', function(){
  return echo('  Usage examples:\n\n    $ nar run app.nar\n    $ nar run app.nar -o some/dir\n    $ nar run app.nar --args-start \'--node ${PATH}\'\n    $ nar run app.nar --debug --no-hooks\n    $ nar run http://my.server.net/my-app-0.1.0.nar\n\t');
}).action(function(){
  return run.apply(this, arguments);
});
run = function(archive, options){
  var debug, verbose, output, strictSsl, argsStart, argsPrestart, argsStop, argsPoststop, bar, opts, onExtract, onStart, onEnd, onCommand, onInfo, onStdout, onStderr, onExit, run, e;
  debug = options.debug, verbose = options.verbose, output = options.output, strictSsl = options.strictSsl, argsStart = options.argsStart, argsPrestart = options.argsPrestart, argsStop = options.argsStop, argsPoststop = options.argsPoststop;
  bar = createBar();
  opts = {
    path: archive,
    dest: output,
    strictSSL: strictSsl,
    clean: options.clean,
    hooks: options.hooks,
    proxy: options.proxy,
    timeout: options.timeout,
    args: {
      start: argsStart,
      prestart: argsPrestart,
      stop: argsStop,
      poststop: argsPoststop
    }
  };
  if (options.user) {
    opts.auth = {
      user: options.user,
      password: options.password
    };
  }
  onExtract = function(){
    return echo(
    "Extracting files...");
  };
  onStart = function(){
    return echo(
    "Running application...");
  };
  onEnd = function(){
    return echo(
    "Finished");
  };
  onCommand = function(cmd, hook){
    return echo(
    "Run [".green + hook.cyan + ("]: " + cmd).green);
  };
  onInfo = function(it){
    return echo(
    "Running " + archiveName(
    it));
  };
  onStdout = function(out){
    return echo(
    ("> " + formatEol(
    out)).green);
  };
  onStderr = function(out){
    return echo(
    ("> " + formatEol(
    out)).red);
  };
  onExit = function(code, hook){
    return echo(
    "End [".green + hook.cyan + ("]: exited with code " + code).green);
  };
  run = function(){
    var archive;
    archive = nar.run(opts).on('download', onDownload).on('downloadEnd', onDownloadEnd(
    bar)).on('progress', onProgress(
    bar)).on('extract', onExtract).on('info', onInfo).on('start', onStart).on('error', onError(
    debug)).on('end', onEnd).on('command', onCommand).on('stderr', onStderr).on('exit', onExit).on('stdout', onStdout);
    if (debug || verbose) {
      if (verbose) {
        return archive.on('entry', onEntry(
        'Extract'));
      }
    } else {
      return archive.on('archive', onArchive(debug, verbose));
    }
  };
  try {
    return run();
  } catch (e$) {
    e = e$;
    return onError(debug)(
    e);
  }
};
formatEol = function(it){
  if (it) {
    return it.replace(/\n(\s+)?$/, '').replace(/\n/g, '\n> ');
  }
};
