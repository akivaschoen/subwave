// Generated by LiveScript 1.3.1
var fs, path, archiver, tmpdir, createGzip, EventEmitter, ref$, checksum, exists, next, isDir, zlibOptions, ignoredFiles, pack, normalizeName, apply;
fs = require('fs');
path = require('path');
archiver = require('archiver');
tmpdir = require('os').tmpdir;
createGzip = require('zlib').createGzip;
EventEmitter = require('events').EventEmitter;
ref$ = require('./utils'), checksum = ref$.checksum, exists = ref$.exists, next = ref$.next, isDir = ref$.isDir;
zlibOptions = {
  level: 1
};
ignoredFiles = ['!.DS_Store', '!Thumbs.db', '!ehthumbs.db', '!Desktop.ini', '!$RECYCLE.BIN/', '!.AppleDouble', '!.LSOverride', '!.Trashes', '!.apdisk', '!.AppleDB'];
module.exports = pack = function(options){
  var ref$, name, src, dest, patterns, ext, emitter, errored, onEnd, onEntry, onError, createStream, createTar, calculateChecksum, doPack;
  options == null && (options = {});
  ref$ = options = apply(
  options), name = ref$.name, src = ref$.src, dest = ref$.dest, patterns = ref$.patterns, ext = ref$.ext;
  emitter = new EventEmitter;
  errored = false;
  onEnd = function(data){
    if (!errored) {
      return emitter.emit('end', data);
    }
  };
  onEntry = function(entry){
    if (entry) {
      return emitter.emit('entry', entry);
    }
  };
  onError = function(err){
    if (!errored) {
      emitter.emit('error', err);
    }
    return errored = true;
  };
  createStream = function(file, cb){
    return fs.createWriteStream(file).on('error', onError).on('close', cb);
  };
  createTar = function(stream, options){
    var src, gzip, patterns, tar;
    src = options.src, gzip = options.gzip, patterns = options.patterns;
    tar = archiver('tar', zlibOptions);
    tar.on('entry', onEntry);
    tar.on('error', onError);
    tar.bulk([{
      expand: true,
      cwd: src,
      src: patterns,
      dest: '.'
    }]);
    if (gzip) {
      tar.pipe(
      createGzip()).pipe(
      stream);
    } else {
      tar.pipe(
      stream);
    }
    return tar.finalize();
  };
  calculateChecksum = function(file, data){
    return function(){
      return checksum(file, function(err, hash){
        if (err) {
          return onError(
          err);
        }
        data.checksum = hash;
        return onEnd(
        data);
      });
    };
  };
  doPack = function(){
    return next(function(){
      var file, filePath, data, cb;
      if (!exists(
      src)) {
        return onError(
        new Error('source path do not exists'));
      }
      if (!isDir(
      dest)) {
        return onError(
        new Error('destination path is not a directory'));
      }
      file = normalizeName(
      name) + "." + ext;
      filePath = path.join(dest, file);
      data = {
        name: name,
        file: file,
        path: filePath
      };
      cb = calculateChecksum(filePath, data);
      return createTar(createStream(filePath, cb), options);
    });
  };
  doPack();
  return emitter;
};
normalizeName = function(name){
  if (~name.indexOf('@')) {
    name = name.replace('/', '-');
  }
  return name;
};
apply = function(options){
  return {
    src: options.src || process.cwd(),
    ext: options.ext || 'tar',
    name: options.name || 'unnamed',
    dest: options.dest || tmpdir(
    options.name),
    gzip: options.gzip || false,
    patterns: (options.patterns || ['**', '.*']).concat(ignoredFiles)
  };
};
